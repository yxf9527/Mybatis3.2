<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        <!--
        1.Student.xml(原始ibatis命名)，mapper代理开发的映射文件命名XxxMapper.xml
        2.namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
        3.注意:使用mapper代理开发，namespace有特殊的作用
        -->
<mapper namespace="test">
        <!--在映射文件中配置很多sql语句-->
        <!--需求：通过id查询用户表的记录-->
        <!--
            1.标识映射文件中的sql，将sql语句封装到mapped statement对象中，所以称为statement的id
            2.parameterType：指定输入参数类型
            3.#{}：表示一个占位符
            4.#{id}：其中的id表示接收的输入参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以为value或者其他
            5.resultType：指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象
        -->
        <select id="findStudentById" parameterType="java.lang.String" resultType="com.mybatis.pojo.Student">
                select * from student where id=#{id}
        </select>

        <!--
            1.需求根据用户名称模糊查询
            2.思路：模糊查询返回结果可能是多条纪录
            3.resultType:指定就是单条记录所映射成java对象类型
            4.${}:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中
            5.使用${}容易引起sql注入
            6.${value}:接受输入参数的内容，如果传入类型是简单类型，${}中只能用value
        -->
        <select id="findStudentByName" parameterType="java.lang.String" resultType="com.mybatis.pojo.Student">
                select * from student where username like '%${value}%'
        </select>

        <!--
            1.需求：添加用户
            2.思路：创建对象，输入参数是java对象类型
            3.#{}：指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
            4.parameterType：指定输入参数类型是pojo（包括用户信息）
        -->
        <insert id="insertStudent" parameterType="com.mybatis.pojo.Student">
            <!--
		                使用sql server的NEWID()函数生成主键
		                执行过程：
		                首先通过NEWID()得到主键，将主键设置到user对象的id属性中
		                其次在insert执行时，从user对象中取出id属性值
		      	顺序在插入sql的前面s
             -->
 			<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
                SELECT NEWID()
            </selectKey>
                INSERT INTO Student (id,USERNAME,BIRTHDAY,SEX,ADDRESS) values (#{id},#{username},#{birthday},#{sex},#{address})
        </insert>

        <!--
            1.需求：根据Id删除用户
            2.思路：传入id
        -->
        <delete parameterType="java.lang.String" id="deleteStudentByName">
                DELETE FROM Student WHERE username like '%${value}%'
        </delete>

        <!--
            1.需求更新用户
            2.根据传入的id修改用户
         -->
        <update parameterType="java.util.HashMap" id="updateStudent">
                UPDATE student SET birthday=#{birthday},address=#{address} where address=#{address_stu}
        </update>
</mapper>